{"version":3,"sources":["../index.ts","../mongo.ts","../io/index.ts","../api/index.ts","../api/routes/users.ts","../api/auth.ts","../api/plugins/imgurUpload.ts","../api/websiteRequest.ts","../api/routes/characters.ts","../api/routes/upload.ts","../api/routes/changelogs.ts","../api/adminAuth.ts","../api/logger.ts"],"sourcesContent":["import express from 'express';\r\nimport { Server } from 'socket.io';\r\n\r\nimport IOHandler from './io';\r\nimport API from './api';\r\nimport { handler } from './build/handler';\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nimport http from 'node:http';\r\n\r\nconst app = express();\r\n\r\nconst server = http.createServer(app);\r\nconst io = new Server(server, {\r\n\tcors: {\r\n\t\torigin: '*',\r\n\t\tmethods: ['GET', 'POST']\r\n\t}\r\n});\r\n\r\nlet route = API.APIHandler(app, server);\r\n\r\napp.use('/api', route);\r\napp.use(handler);\r\n\r\nIOHandler(io);\r\n\r\nserver.listen(process.env.PORT, () => {\r\n\tconsole.log(\r\n\t\t`\\n__________                                            _________                                \\n\\\\______   \\\\ ___________  __________   ____ _____     /   _____/ ______________  __ ___________ \\n |     ___// __ \\\\_  __ \\\\/  ___/  _ \\\\ /    \\\\\\\\__  \\\\    \\\\_____  \\\\_/ __ \\\\_  __ \\\\  \\\\/ // __ \\\\_  __ \\\\\\n |    |   \\\\  ___/|  | \\\\/\\\\___ (  <_> )   |  \\\\/ __ \\\\_  /        \\\\  ___/|  | \\\\/\\\\   /\\\\  ___/|  | \\\\/\\n |____|    \\\\___  >__|  /____  >____/|___|  (____  / /_______  /\\\\___  >__|    \\\\_/  \\\\___  >__|   \\n               \\\\/           \\\\/           \\\\/     \\\\/          \\\\/     \\\\/                 \\\\/       \\n`\r\n\t);\r\n\r\n\tconsole.log(`Server is listening\\n`);\r\n\r\n\tconsole.log(`- Local : http://localhost:${process.env.PORT}`);\r\n});\r\n","import { config } from \"dotenv\";\r\nconfig();\r\n\r\nimport { MongoClient } from \"mongodb\";\r\n\r\nlet client = new MongoClient(process.env.MONGO_STRING!);\r\n\r\n(async () => {\r\n  try {\r\n    await client.connect();\r\n    console.log(\"\\nConnected to the Database\");\r\n    console.log(\"======================================\");\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n})();\r\n\r\nexport let db = client.db(\"persona\");\r\nexport default client;\r\n","import { Server } from 'socket.io';\r\nimport { db } from '../mongo';\r\nimport { ObjectId } from 'mongodb';\r\nlet users = db.collection('users');\r\nlet messages = db.collection('messages');\r\n\r\nexport default function IOHandler(io: Server) {\r\n\tio.on('connection', async (socket) => {\r\n\t\tsocket.on('login', async (token: string, callback: (user: any) => Promise<void>) => {\r\n\t\t\tlet user: any = await users.findOne({ token });\r\n\t\t\tif (!user) return;\r\n\r\n\t\t\tawait users.updateOne({ token }, { $set: { online: true } });\r\n\r\n\t\t\tawait callback(user);\r\n\r\n\t\t\tconsole.log(`${user.username} (${user._id.toString()}) joined the website`);\r\n\r\n\t\t\tsocket.emit('retrieve_messages', await doRetrieveMessages());\r\n\r\n\t\t\tasync function doRetrieveMessages() {\r\n\t\t\t\tlet allMessages = await messages.find().toArray();\r\n\t\t\t\tlet parsedAllmessages = [];\r\n\r\n\t\t\t\tfor (let msg of allMessages) {\r\n\t\t\t\t\tif (msg.targetId) {\r\n\t\t\t\t\t\tif (user._id.equals(msg.targetId)) {\r\n\t\t\t\t\t\t\tparsedAllmessages.push(msg);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else parsedAllmessages.push(msg);\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn parsedAllmessages;\r\n\t\t\t}\r\n\r\n\t\t\tsocket.on('message', async (content, target) => {\r\n\t\t\t\tif (!content) return;\r\n\r\n\t\t\t\tawait messages.insertOne({\r\n\t\t\t\t\tcreatedAt: Date.now(),\r\n\t\t\t\t\tuserId: user._id,\r\n\t\t\t\t\tcontent,\r\n\t\t\t\t\ttargetId: target ? target._id : null\r\n\t\t\t\t});\r\n\r\n\t\t\t\tfor (let [id, socket] of io.sockets.sockets) {\r\n\t\t\t\t\tsocket.emit('retrieve_messages', await doRetrieveMessages());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tsocket.on('get_messages', async (callback) => {\r\n\t\t\t\tawait callback(await doRetrieveMessages());\r\n\t\t\t});\r\n\r\n\t\t\tsocket.on('disconnect', async () => {\r\n\t\t\t\tconsole.log(`${user.username} (${user._id.toString()}) left the website`);\r\n\r\n\t\t\t\tawait users.updateOne({ token: user.token }, { $set: { online: false } });\r\n\t\t\t});\r\n\r\n\t\t\tif (user.admin) {\r\n\t\t\t\tsocket.on('dashbord', () => {\r\n\t\t\t\t\tsocket.on('get_users', async (callback: (users: any[]) => void) => {\r\n\t\t\t\t\t\tcallback(await users.find().toArray());\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tsocket.on('delete_user', async (userId: string, message: (str: string) => void) => {\r\n\t\t\t\t\t\tlet u = await users.findOne({ _id: new ObjectId(userId) });\r\n\r\n\t\t\t\t\t\tif (u?.admin) {\r\n\t\t\t\t\t\t\tmessage(\"Can't delete an admin user\");\r\n\t\t\t\t\t\t} else await users.deleteOne({ _id: u?._id });\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n","import e, { Router } from 'express';\r\nimport usersRoute from './routes/users';\r\nimport charactersRoute from './routes/characters';\r\nimport uploadRoute from './routes/upload';\r\nimport changelogsRoute from './routes/changelogs';\r\nimport cookieParser from 'cookie-parser';\r\nimport logger from './logger';\r\nimport path from 'node:path';\r\nimport cookieSession from 'cookie-session';\r\nimport { randomUUID } from 'node:crypto';\r\nimport { fileURLToPath } from 'node:url';\r\nimport { Server } from 'node:http';\r\n\r\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\r\n\r\nconst route = Router();\r\n\r\nfunction APIHandler(app: e.Express, server: Server) {\r\n\tapp.use((req, res, next) => {\r\n\t\tconsole.log(req.headers);\r\n\t\tres.header('Access-Control-Allow-Origin', req.headers.origin || req.headers['host']);\r\n\r\n\t\tlet blockedIps = ['54.66.245.129', '146.190.197.169', '172.104.41.253'];\r\n\r\n\t\tlet block = false;\r\n\t\tfor (let ip of blockedIps) {\r\n\t\t\tif (req.headers['x-forwarded-for']?.includes(ip)) {\r\n\t\t\t\tblock = true;\r\n\t\t\t\tconsole.log(`Blocked`);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (block) res.send('blocked');\r\n\t\telse next();\r\n\t});\r\n\r\n\troute.use(function (req, res, next) {\r\n\t\tres.header('Access-Control-Allow-Origin', req.headers.origin || req.headers['host']);\r\n\t\tres.header('Access-Control-Allow-Credentials', 'true');\r\n\t\tres.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');\r\n\t\tres.header('Access-Control-Allow-Methods', 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS');\r\n\r\n\t\tnext();\r\n\t});\r\n\r\n\troute.use('/files', e.static(path.join(__dirname, 'files')));\r\n\r\n\troute.use(e.json());\r\n\troute.use(e.urlencoded());\r\n\r\n\troute.use(cookieParser());\r\n\troute.use(\r\n\t\tcookieSession({\r\n\t\t\tsecret: randomUUID(),\r\n\t\t\thttpOnly: false,\r\n\t\t\tsameSite: 'strict',\r\n\t\t\tpath: '/',\r\n\t\t\tdomain: 'persona-db.xyz',\r\n\t\t\tmaxAge: Date.now() + 2592000000\r\n\t\t})\r\n\t);\r\n\r\n\troute.use(logger);\r\n\r\n\troute.get('/', (req, res) => {\r\n\t\tres.send('Hello World');\r\n\t});\r\n\r\n\troute.use('/characters', charactersRoute);\r\n\troute.use('/users', usersRoute);\r\n\troute.use('/upload', uploadRoute);\r\n\troute.use('/changelogs', changelogsRoute);\r\n\r\n\treturn route;\r\n}\r\n\r\nexport default { APIHandler };\r\n","import { Router } from 'express';\r\nimport { db } from '../../mongo';\r\nimport auth from '../auth';\r\nimport { compareSync, hashSync } from 'bcrypt';\r\nimport dayjs from 'dayjs';\r\nimport passwordValidator from 'password-validator';\r\nimport * as EmailValidator from 'email-validator';\r\nimport { ObjectId } from 'mongodb';\r\nimport multer from 'multer';\r\nimport upload from '../plugins/imgurUpload';\r\nimport websiteRequest from '../websiteRequest';\r\n\r\nlet schema = new passwordValidator()\r\n\t.is()\r\n\t.min(8)\r\n\t.is()\r\n\t.max(30)\r\n\t.has()\r\n\t.uppercase()\r\n\t.has()\r\n\t.lowercase()\r\n\t.has()\r\n\t.digits()\r\n\t.has()\r\n\t.not()\r\n\t.spaces()\r\n\t.is()\r\n\t.not()\r\n\t.oneOf(['Passw0rd', 'Password123']);\r\n\r\nconst collection = db.collection('users');\r\n\r\nfunction randomToken(): string {\r\n\tlet len = 100;\r\n\tlet ret = '';\r\n\tlet chars = 'abcdefghijklmnopqrstuvwxyz1234567890.-';\r\n\r\n\tfor (let i = 0; i < len; i++) {\r\n\t\tret += chars[Math.floor(Math.random() * chars.length)];\r\n\t}\r\n\r\n\treturn ret;\r\n}\r\n\r\nconst route = Router();\r\n\r\nroute.get('/:id?', async (req, res) => {\r\n\tif (req.params.id) {\r\n\t\tlet user = null;\r\n\t\tif (req.params.id.startsWith('@')) {\r\n\t\t\tlet username = req.params.id.replace('@', '');\r\n\t\t\tuser = await collection.findOne({ username });\r\n\t\t} else {\r\n\t\t\tuser = await collection.findOne({ _id: new ObjectId(req.params.id) });\r\n\t\t}\r\n\r\n\t\tif (!user) return res.status(404).json({ message: \"couldn't find user\" });\r\n\t\telse {\r\n\t\t\treturn res.json({\r\n\t\t\t\tusername: user.username,\r\n\t\t\t\t_id: user._id,\r\n\t\t\t\tavatar: user.avatar,\r\n\t\t\t\tcreatedAt: user.createdAt,\r\n\t\t\t\tonline: user.online\r\n\t\t\t});\r\n\t\t}\r\n\t} else {\r\n\t\tlet users = [];\r\n\r\n\t\tlet mongoUsers = await collection.find().toArray();\r\n\r\n\t\tfor (let user of mongoUsers) {\r\n\t\t\tusers.push({\r\n\t\t\t\tusername: user.username,\r\n\t\t\t\t_id: user._id,\r\n\t\t\t\tavatar: user.avatar,\r\n\t\t\t\tcreatedAt: user.createdAt,\r\n\t\t\t\tonline: user.online\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tres.json(users);\r\n\t}\r\n});\r\n\r\nroute.post('/', websiteRequest, async (req, res) => {\r\n\tlet { username, email, password } = req.body;\r\n\r\n\tif (!username || !email || !password)\r\n\t\treturn res.status(500).json({\r\n\t\t\tmessage: 'account creation must have: username, email and password.'\r\n\t\t});\r\n\r\n\tlet u = (await collection.findOne({ username })) || (await collection.findOne({ email }));\r\n\r\n\tif (u) return res.status(500).json({ message: 'account already exists with email or username' });\r\n\r\n\tif (!schema.validate(password)) {\r\n\t\tres.status(500).json({\r\n\t\t\tmessage:\r\n\t\t\t\t'Must be secure password, must have at least, 1 digit, 1 uppercase, 1 lowercase, must not contain spaces'\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\tif (!EmailValidator.validate(email)) {\r\n\t\tres.status(500).json({\r\n\t\t\tmessage: 'Must be a valid email'\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet token = randomToken();\r\n\tlet hashedPassword = hashSync(password, 10);\r\n\r\n\tlet result = await collection.insertOne({\r\n\t\tusername,\r\n\t\temail,\r\n\t\ttoken,\r\n\t\tpassword: hashedPassword,\r\n\t\tcreatedAt: Date.now(),\r\n\t\tip: req.headers['x-forwarded-for']\r\n\t});\r\n\r\n\tres.cookie('token', token);\r\n\r\n\treturn res.json({\r\n\t\tmessage: 'OK',\r\n\t\ttoken,\r\n\t\t_id: result.insertedId\r\n\t});\r\n});\r\n\r\nroute.delete('/', auth, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet result = await collection.updateOne({ token }, { $set: { suspendedAt: Date.now() } });\r\n\r\n\tres.json({\r\n\t\tmessage: 'account suspended. Will be deleted in 30 days.',\r\n\t\t_id: result.upsertedId\r\n\t});\r\n});\r\n\r\nlet singlerMulter = multer({ dest: './files' }).single('file');\r\n\r\nroute.put('/', auth, singlerMulter, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet u = (await collection.findOne({ token }))!;\r\n\r\n\tif (u.suspendedAt) {\r\n\t\t// https://stackoverflow.com/questions/66639760/dayjs-diff-between-two-date-in-day-and-hours Answer\r\n\r\n\t\tconst date1 = dayjs(u.suspendedAt);\r\n\t\tconst date2 = dayjs();\r\n\r\n\t\tlet hours = date2.diff(date1, 'hours');\r\n\t\tconst days = Math.floor(hours / 24);\r\n\t\thours = hours - days * 24;\r\n\r\n\t\tres.status(403).json({\r\n\t\t\tmessage: `account suspended, ask the support to recover within ${days} days and ${hours} hours.`\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet { username, email, password, bio } = req.body;\r\n\r\n\tlet updateObject: {\r\n\t\tusername?: string;\r\n\t\temail?: string;\r\n\t\tpassword?: string;\r\n\t\tavatar?: string;\r\n\t\tbio?: string;\r\n\t} = {};\r\n\r\n\tlet errorNotUpdated = [];\r\n\r\n\tif (username) {\r\n\t\tlet u2 = await collection.findOne({ username });\r\n\r\n\t\tif (!u2) updateObject.username = username;\r\n\t\telse errorNotUpdated.push('username');\r\n\t}\r\n\r\n\tif (email) updateObject.email = email;\r\n\tif (bio) updateObject.bio = bio;\r\n\tif (password) updateObject.password = hashSync(password, 10);\r\n\r\n\tlet isFileUpdated = false;\r\n\r\n\tif (req.file) {\r\n\t\tlet uploadResult = await upload(req.file, u.name);\r\n\t\tif (uploadResult.url) updateObject.avatar = uploadResult.url;\r\n\t\tisFileUpdated = uploadResult.updated;\r\n\t}\r\n\r\n\tawait collection.updateOne({ token: req.cookies['token'] }, { $set: updateObject });\r\n\r\n\tif (errorNotUpdated.length > 0) {\r\n\t\tif (errorNotUpdated.includes('username') && isFileUpdated) {\r\n\t\t\tres.json({\r\n\t\t\t\tmessage: \"Username already exists. Avatar has been updated! <a href='/profile'>Reload</a>\"\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tif (errorNotUpdated.includes('username') && !isFileUpdated) {\r\n\t\t\tres.status(500).json({ message: 'Username already exists.' });\r\n\t\t}\r\n\t} else res.json({ message: \"It has been updated! <a href='/profile'>Reload</a>\" });\r\n});\r\n\r\nroute.post('/login', async (req, res) => {\r\n\tlet { username, password } = req.body;\r\n\r\n\tif (!username || !password)\r\n\t\treturn res.status(500).json({ message: 'Username or password not provided' });\r\n\r\n\tlet u = await collection.findOne({ username });\r\n\r\n\tif (!u || !compareSync(password, u.password))\r\n\t\treturn res.status(404).json({ message: 'Cannot find account with username and password' });\r\n\r\n\tif (u.suspendedAt) {\r\n\t\t// https://stackoverflow.com/questions/66639760/dayjs-diff-between-two-date-in-day-and-hours Answer\r\n\r\n\t\tconst date1 = dayjs(u.suspendedAt);\r\n\t\tconst date2 = dayjs();\r\n\r\n\t\tlet hours = date2.diff(date1, 'hours');\r\n\t\tconst days = Math.floor(hours / 24);\r\n\t\thours = hours - days * 24;\r\n\r\n\t\tres.status(403).json({\r\n\t\t\tmessage: `account suspended, ask the support to recover within ${days} days and ${hours} hours.`\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tres.cookie('token', u.token);\r\n\r\n\tres.json({ message: 'Logged in', token: u.token });\r\n});\r\n\r\nroute.post('/exchange', auth, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet u = (await collection.findOne({ token }))!;\r\n\r\n\tif (u.suspendedAt) {\r\n\t\t// https://stackoverflow.com/questions/66639760/dayjs-diff-between-two-date-in-day-and-hours Answer\r\n\r\n\t\tconst date1 = dayjs(u.suspendedAt);\r\n\t\tconst date2 = dayjs();\r\n\r\n\t\tlet hours = date2.diff(date1, 'hours');\r\n\t\tconst days = Math.floor(hours / 24);\r\n\t\thours = hours - days * 24;\r\n\r\n\t\tres.status(403).json({\r\n\t\t\tmessage: `account suspended, ask the support to recover within ${days} days and ${hours} hours.`\r\n\t\t});\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tres.json({ ...u, message: 'OK' });\r\n});\r\n\r\nexport default route;\r\n","import { RequestHandler } from 'express';\r\nimport { db } from '../mongo';\r\nconst collection = db.collection('users');\r\n\r\nlet auth: RequestHandler = async (req, res, next) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\tif (!token) return res.status(403).json({ message: 'Authorization not provided' });\r\n\r\n\tlet user = await collection.findOne({ token });\r\n\tif (user) {\r\n\t\tnext();\r\n\t} else {\r\n\t\tres.clearCookie('token');\r\n\t\tres.status(403).json({ message: 'Invalid authorization' });\r\n\t}\r\n};\r\n\r\nexport default auth;\r\n","import { Client as ImgurClient } from '@rmp135/imgur';\r\nimport { readFileSync, rmSync } from 'fs';\r\n\r\nlet imgur = new ImgurClient({\r\n\tclient_id: process.env.IMGUR_ID,\r\n\tclient_secret: process.env.IMGUR_SECRET,\r\n\taccess_token: process.env.IMGUR_ACCESS,\r\n\trefresh_token: process.env.IMGUR_REFRESH\r\n});\r\n\r\nexport default async function upload(\r\n\tfile: Express.Multer.File,\r\n\tname?: string\r\n): Promise<{ url?: string; updated: boolean }> {\r\n\tlet res: { url?: string; updated: boolean } = { updated: false };\r\n\ttry {\r\n\t\tlet result = await imgur.Image.upload(readFileSync(file.path, { encoding: 'base64' }), {\r\n\t\t\tname: file.filename\r\n\t\t});\r\n\r\n\t\trmSync(file.path);\r\n\r\n\t\tres.url = result.data.link;\r\n\t\tres.updated = true;\r\n\r\n\t\treturn res;\r\n\t} catch (e) {\r\n\t\tconsole.log(e);\r\n\t\tres.updated = true;\r\n\t\treturn res;\r\n\t}\r\n}\r\n","import { RequestHandler } from 'express';\r\n\r\n// Website Request\r\n/* {\r\n  host: 'persona-db.xyz',\r\n  'x-forwarded-proto': 'http',\r\n  'x-real-ip': '',\r\n  'x-forwarded-for': '',\r\n  connection: 'close',\r\n  'content-length': '69',\r\n  'accept-encoding': 'gzip',\r\n  'cf-ray': '85c244db4da06985-CDG',\r\n  'cf-visitor': '{\"scheme\":\"https\"}',\r\n  'sec-ch-ua': '\"Not A(Brand\";v=\"99\", \"Google Chrome\";v=\"121\", \"Chromium\";v=\"121\"',\r\n  accept: 'application/json, text/plain, *\\/*',\r\n  'content-type': 'application/json',\r\n  'sec-ch-ua-mobile': '?0',\r\n  'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/121.0.0.0 Safari/537.36',\r\n  'sec-ch-ua-platform': '\"Windows\"',\r\n  origin: 'https://persona-db.xyz',\r\n  'sec-fetch-site': 'same-origin',\r\n  'sec-fetch-mode': 'cors',\r\n  'sec-fetch-dest': 'empty',\r\n  referer: 'https://persona-db.xyz/login',\r\n  'accept-language': 'fr-FR,fr;q=0.9,en-US;q=0.8,en;q=0.7',\r\n  priority: 'u=1, i',\r\n  'cf-connecting-ip': '',\r\n  'cdn-loop': 'cloudflare',\r\n  'cf-ipcountry': 'FR'\r\n}\r\n*/\r\n\r\n// Application Request\r\n/*\r\n{\r\n  host: 'persona-db.xyz',\r\n  'x-forwarded-proto': 'http',\r\n  'x-real-ip': '',\r\n  'x-forwarded-for': '',\r\n  connection: 'close',\r\n  'content-length': '2',\r\n  'accept-encoding': 'gzip',\r\n  'cf-ray': '85c24819684104a8-CDG',\r\n  'cf-visitor': '{\"scheme\":\"https\"}',\r\n  accept: 'application/json, text/plain',\r\n  'content-type': 'application/json',\r\n  'user-agent': 'axios/1.6.7',\r\n  'cf-connecting-ip': '',\r\n  'cdn-loop': 'cloudflare',\r\n  'cf-ipcountry': 'FR'\r\n}*/\r\n\r\nlet websiteRequest: RequestHandler = async (req, res, next) => {\r\n\tif (req.headers['referer'] && req.headers['referer'].includes('persona-db.xyz')) next();\r\n\telse res.status(403).json({ message: 'this request is only allowed on the website' });\r\n};\r\n\r\nexport default websiteRequest;\r\n","import { Router } from 'express';\r\nimport { db } from '../../mongo';\r\nimport auth from '../auth';\r\nimport { ObjectId } from 'mongodb';\r\n\r\nfunction generateID() {\r\n\tlet res = '';\r\n\tlet len = 6;\r\n\tlet chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890';\r\n\r\n\tfor (let i = 0; i < len; i++) {\r\n\t\tres += chars[Math.floor(Math.random() * chars.length)];\r\n\t}\r\n\r\n\treturn res;\r\n}\r\n\r\nconst collection = db.collection('characters');\r\nconst users = db.collection('users');\r\n\r\nconst route = Router();\r\n\r\nroute.get('/:code?', async (req, res) => {\r\n\tif (req.params.code) {\r\n\t\tlet chara = await collection.findOne({ code: req.params.code });\r\n\t\tif (chara) {\r\n\t\t\tres.json(chara);\r\n\t\t} else {\r\n\t\t\tres.status(404).json({ message: \"couldn't find chara with code\" });\r\n\t\t}\r\n\t} else {\r\n\t\tlet charas = await collection.find().toArray();\r\n\t\tres.json(charas);\r\n\t}\r\n});\r\n\r\nroute.post('/', auth, async (req, res) => {\r\n\tlet { name, description, stats, tags, icon, refsheet } = req.body;\r\n\r\n\tif (!name || !description)\r\n\t\treturn res.status(500).json({\r\n\t\t\tmessage: 'character creation must have: name, description.'\r\n\t\t});\r\n\r\n\tif (await collection.findOne({ name })) {\r\n\t\tres.status(500).json({ message: 'character already exists with name' });\r\n\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet now = Date.now();\r\n\tlet code = generateID();\r\n\tlet owner = (await users.findOne({ token: req.cookies['token'] }))!;\r\n\r\n\tlet result = await collection.insertOne({\r\n\t\townerId: owner._id,\r\n\t\tname,\r\n\t\tcode,\r\n\t\tdescription,\r\n\t\teditedAt: now,\r\n\t\tcreatedAt: now,\r\n\t\tstats,\r\n\t\ttags,\r\n\t\ticon,\r\n\t\trefsheet\r\n\t});\r\n\r\n\treturn res.json({\r\n\t\tmessage: 'OK',\r\n\t\tcode,\r\n\t\t_id: result.insertedId\r\n\t});\r\n});\r\n\r\nroute.delete('/:id', auth, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet u = (await users.findOne({ token }))!;\r\n\tif (!req.params.id) return res.status(500).json({ message: 'must provide character _id' });\r\n\tlet chara = (await collection.findOne({ _id: new ObjectId(req.params.id) }))!;\r\n\r\n\tif (!u._id.equals(chara.ownerId)) {\r\n\t\tres.status(403).json({ message: 'you are not the owner' });\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet result = await collection.deleteOne({\r\n\t\t_id: new ObjectId(req.params.id)\r\n\t});\r\n\r\n\tres.json({\r\n\t\tmessage: 'character deleted',\r\n\t\tisOk: result.acknowledged\r\n\t});\r\n});\r\n\r\nroute.put('/', auth, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet u = (await users.findOne({ token }))!;\r\n\tlet { _id, description, name, stats, tags, icon, refsheet } = req.body;\r\n\tif (!_id) return res.status(500).json({ message: 'must provide character _id' });\r\n\r\n\tlet chara = (await collection.findOne({ _id: new ObjectId(_id) }))!;\r\n\r\n\tif (!u._id.equals(chara.ownerId)) {\r\n\t\tres.status(403).json({ message: 'you are not the owner' });\r\n\t\treturn;\r\n\t}\r\n\r\n\tlet updateObj: {\r\n\t\tdescription?: any;\r\n\t\tname?: string;\r\n\t\tstats?: {}[];\r\n\t\ttags?: string[];\r\n\t\ticon?: string;\r\n\t\trefsheet?: string;\r\n\t} = {};\r\n\r\n\tif (description) updateObj.description = description;\r\n\tif (name) updateObj.name = name;\r\n\tif (stats) updateObj.stats = stats;\r\n\tif (tags) updateObj.tags = tags;\r\n\tif (icon) updateObj.icon = icon;\r\n\tif (refsheet) updateObj.refsheet = refsheet;\r\n\r\n\tlet result = await collection.updateOne({ _id: chara._id }, { $set: updateObj });\r\n\tres.json({ message: 'character updated', _id: result.upsertedId });\r\n});\r\n\r\nexport default route;\r\n","import { Router } from 'express';\r\nimport multer from 'multer';\r\nimport upload from '../plugins/imgurUpload';\r\n\r\nlet route = Router();\r\nlet single = multer({ dest: './files' }).single('image');\r\n\r\nroute.post('/', single, async (req, res) => {\r\n\tif (req.file) {\r\n\t\ttry {\r\n\t\t\tlet result = await upload(req.file);\r\n\r\n\t\t\tif (result.url) {\r\n\t\t\t\tres.json({ url: result.url });\r\n\t\t\t} else {\r\n\t\t\t\tres.status(500).json({ message: 'error while uploading image' });\r\n\t\t\t}\r\n\t\t} catch (e) {\r\n\t\t\tconsole.log(e);\r\n\t\t}\r\n\t} else {\r\n\t\tres.status(500).json({ message: 'no file provided' });\r\n\t}\r\n});\r\n\r\nexport default route;\r\n","import { Router } from 'express';\r\nimport adminAuth from '../adminAuth';\r\nimport { db } from '../../mongo';\r\nconst collection = db.collection('changelogs');\r\nconst users = db.collection('users');\r\n\r\nlet route = Router();\r\n\r\nroute.post('/', adminAuth, async (req, res) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet user = await users.findOne({ token });\r\n\r\n\tlet { content } = req.body;\r\n\r\n\tcollection.insertOne({\r\n\t\tcreatedAt: Date.now(),\r\n\t\tuserId: user?._id.toString(),\r\n\t\tcontent\r\n\t});\r\n\r\n\tres.json({ message: 'ok' });\r\n});\r\n\r\nroute.get('/', async (req, res) => {\r\n\tres.json(await collection.find().toArray());\r\n});\r\n\r\nexport default route;\r\n","import { RequestHandler } from 'express';\r\nimport { db } from '../mongo';\r\nconst collection = db.collection('users');\r\n\r\nlet adminAuth: RequestHandler = async (req, res, next) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tif (!token) return res.status(403).json({ message: 'Authorization not provided' });\r\n\r\n\tlet user = await collection.findOne({ token });\r\n\r\n\tif (user) {\r\n\t\tif (user.admin) next();\r\n\t\telse {\r\n\t\t\tres.status(403).json({ message: 'Admin users can only perform that action' });\r\n\t\t}\r\n\t} else {\r\n\t\tres.clearCookie('token');\r\n\t\tres.status(403).json({ message: 'Invalid authorization' });\r\n\t}\r\n};\r\n\r\nexport default adminAuth;\r\n","import { RequestHandler } from 'express';\r\nimport { db } from '../mongo';\r\n// import chalk from 'chalk'; Module Incompatibility\r\n\r\nconst collection = db.collection('users');\r\n\r\nlet logger: RequestHandler = async (req, res, next) => {\r\n\tlet token = req.cookies['token'] || req.headers['authorization'];\r\n\r\n\tlet userData = token ? await collection.findOne({ token }) : null;\r\n\tlet userStr = userData ? `${userData.username} (${userData._id.toString()})` : 'anonymous';\r\n\r\n\tconsole.log(\r\n\t\t`${req.method.toUpperCase()} ${req.path} ${userStr} (${req.headers['x-forwarded-for']})`\r\n\t);\r\n\tnext();\r\n};\r\n\r\nexport default logger;\r\n"],"mappings":"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","names":["e","io","socket","callback","Router","ObjectId","e","collection","ObjectId","users","Router","ObjectId","collection","users","route","Router","Router","multer","route","Router","multer","e","Router","collection","collection","users","route","Router","collection","route","Router","app","server","route"]}